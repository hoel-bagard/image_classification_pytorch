[project]
name = "classification"

[tool.poetry]
name = "classification"
version = "0.2.0"
description = "PyTorch Image Classification"
authors = ["Bagard Hoel"]
readme = "README.md"

[tool.poetry.scripts]
classification-train = "classification.train:main"
classification-inference = "classification.inference:main"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
numpy = "^1.26.4"
pydantic = "^2.6.1"
opencv-python = "^4.9.0.80"
albumentations = "^1.3.1"
einops = "^0.7.0"
tensorboard = "^2.15.1"
timm = "^0.9.12"
hbtools = "^0.4.0"
# TODO: Update pytorch
torch = [
  {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp311-cp311-linux_x86_64.whl", platform = "linux", python = ">=3.11,<3.13"},
  {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp311-cp311-win_amd64.whl", platform = "win32", python = ">=3.11,<3.13"},
	# {version = "^2.0.1", platform = "linux", source = "torchcu117"},
	# {version = "^2.0.1", platform = "win32", source = "torchcu117"},
	{url = "https://download.pytorch.org/whl/cpu/torch-2.0.1-cp311-none-macosx_10_9_x86_64.whl", platform = "darwin", markers = "platform_machine == 'x86_64'", python = ">=3.11,<3.12"},
	{url = "https://download.pytorch.org/whl/cpu/torch-2.0.1-cp311-none-macosx_11_0_arm64.whl", platform = "darwin", markers = "platform_machine == 'arm64'", python = ">=3.11,<3.12"},
  {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1-cp310-none-macosx_10_9_x86_64.whl", platform = "darwin", markers = "platform_machine == 'x86_64'", python = ">=3.10,<3.11"},
	{url = "https://download.pytorch.org/whl/cpu/torch-2.0.1-cp310-none-macosx_11_0_arm64.whl", platform = "darwin", markers = "platform_machine == 'arm64'", python = ">=3.10,<3.11"}
]

# [[tool.poetry.source]]
# name = "torchcu117"
# url = "https://download.pytorch.org/whl/cu117"
# priority = "explicit"
matplotlib = "^3.8.2"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ruff = "^0.2.1"
pyright = "^1.1.350"
pre-commit = "^3.6.0"
opencv-stubs = "^0.0.8"
flake8-pyproject = "^1.2.3"
matplotlib-stubs = "^0.2.0"

[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib",]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "D203",       # one-blank-line-before-class (incompatible with D211)
  "D213",       # multi-line-summary-second-line (incompatible with D212)
  "COM812",     # conflict with formatter
  "ISC001",     # conflict with formatter
  "D407",       # Missing dashed underline after section ("Args")
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
order-by-type = false
known-first-party = ["classification"]

[tool.ruff.lint.pylint]
max-args = 15
max-statements = 60

[tool.pyright]
include = ["src/classification"]
exclude = ["checkpoints", "data", "outputs", ".venv"]
ignore = ["**/__init__.py"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.10"
pythonPlatform = "Linux"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

[tool.flake8]
max-line-length = 120
exclude = ["env", "venv", ".venv", ".env", "checkpoints"]
